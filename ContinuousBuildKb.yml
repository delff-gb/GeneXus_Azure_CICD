# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  #Pipeline config variables:
  EXEC_AGENT: $(agent)

  #Environment variables: 
  MSBUILD: $(msbuildpath)
  BL_PATH: $(genexus)
  WORKING_DIR: $(workingDir)
  KB_PATH: $(workingDir)\$(kbalias)
  
  #KB Building variables:
  KB_ALIAS: $(kbalias)
  GXSERVER_URL: $(serverurl)
  GXSERVER_USER: $(serveruser)
  GXSERVER_PASS: $(password)
  KBENVIRONMENT: $(environment)
  KBGENERATOR: $(generator)
  SQL_SERVER: $(sqlserver)
  INCLUDE_GAMFRONTEND: "false"
  INCLUDE_SDSAMPLES: "false"
  
  #Generate Sources variables:
  PUBLISH_SETTINGS: $(azurePublish)
  DEPLOYMENT_UNIT: $(deploymentUnit)
  DEPLOY_NAME: $(deploymentUnit)$(Build.BuildNumber)
  APPLICATION_KEY: $(encriptKey)
  
  #Code versioning variables:
  COMMIT_FOLDER: $(KB_PATH)\NetModel\Deploy\AZURE_SERVERLESS\$(DEPLOYMENT_UNIT)\$(DEPLOY_NAME)
  ANGULAR_FOLDER: $(KB_PATH)\NetModel\mobile\Angular
  GIT_USER: $(gituser)
  GIT_PASSWORD: $(gitpassword) #This could alternatively be a PAT
  GIT_REPO: $(gitrepo)
  GIT_BRANCH: $(gitbranch) #Branch must exist. Content will be overwritten

# Scheduled triggers. Can also be setup through UI, which takes precendence.
schedules:
  - cron: "*/1 * * * *"
    displayName: Custom time trigger
    branches:
      include:
        - GenerateSourcesExtraFiles
    always: true

trigger:
  batch: true
  branches:
    include:
    - GenerateSourcesExtraFiles


pool:
  name: $(EXEC_AGENT)

jobs:
  - job: CheckoutOrUpdate
    condition: always()
    steps:
      - script: >
          $(MSBUILD) "$(BL_PATH)\AzureCICD.msbuild" -target:CreateOrUpdateKB /p:WorkingDirectory=$(KB_PATH) /p:CreateDbInKbFolder=True
          /p:DbaseName=$(KB_ALIAS) /p:DbaseUseIntegratedSecurity=True /p:ServerUrl=$(GXSERVER_URL) /p:ServerKbAlias=$(KB_ALIAS) 
          /p:ServerUsername=$(GXSERVER_USER) /p:ServerPassword=$(GXSERVER_PASS)
          
          set /p updateCount=<"$(KB_PATH)\updateCount.txt"

          echo ##vso[task.setvariable variable=updateCount;isOutput=true]%updateCount%
        name: CreateOrUpdateKB

  - job: BuildKnowledgeBase
    dependsOn: CheckoutOrUpdate
    condition: or(and(succeeded(), gt(dependencies.CheckoutOrUpdate.outputs['CreateOrUpdateKB.updateCount'], '0')),eq(${{parameters.forceRebuild}}, True))
    steps:
      - script: rmdir $(KB_PATH)\NetModel /s /q
        condition: eq(${{parameters.forceClean}}, True)
        name: CleanBuildDir

      - script: >
          $(MSBUILD) "$(BL_PATH)\AzureCICD.Msbuild" -target:Build /p:WorkingDirectory=$(KB_PATH) /p:ForceRebuild=${{parameters.forceRebuild}} 
          /p:UpdateMode="always" /p:IncludeFrontendObjects="false" /p:IncludeSDSamples="false" /p:AppDB="$(kbalias)" /p:SQLInstance="$(SQL_SERVER)"
        name: BuildKB

  - job: GenerateSources
    dependsOn: BuildKnowledgeBase
    condition: or(succeeded(), eq(${{parameters.forceSources}}, 'true'))
    steps:
      - script: >
          $(MSBUILD) "$(BL_PATH)\deploy.msbuild" /t:CreateDeploy /p:KBPath="$(KB_PATH)";KBEnvironment="$(KBENVIRONMENT)";DeploymentUnit="$(DEPLOYMENT_UNIT)" 
          /p:ProjectName="$(DEPLOY_NAME)" /p:TargetId="AZURE_SERVERLESS" /p:ObjectNames="DeploymentUnitCategory:$(DEPLOYMENT_UNIT)"
          /p:DEPLOY_TARGETS="$(BL_PATH)\DeploymentTargets\AzureServerless\azureserverless.targets" 
          /p:DeployFullPath="$(KB_PATH)\NetModel\Deploy\AZURE_SERVERLESS\$(DEPLOYMENT_UNIT)\$(DEPLOY_NAME)" 
          /p:WebSourcePath="$(KB_PATH)\NetModel\web" /p:GX_PROGRAM_DIR="$(BL_PATH)" /p:INCLUDE_GAM="False" /p:INCLUDE_GXFLOW_BACKOFFICE="False"
          /p:DEPLOY_TYPE="SOURCES" /p:APPLICATION_KEY="$(APPLICATION_KEY)" /p:TimeStamp="$(DEPLOY_NAME)"
        name: CreateSources

      - script: >  
          $(MSBUILD) /ToolsVersion:4.0 "$(KB_PATH)\NetModel\web\$(DEPLOY_NAME).gxdproj" /t:CreatePackage 
          /p:GX_PROGRAM_DIR="$(BL_PATH)" /p:AZURE_PUBLISH_SETTINGS="$(PUBLISH_SETTINGS)" 
          /p:APPLICATION_KEY="$(APPLICATION_KEY)" /p:DEPLOY_TYPE="SOURCES" /p:TimeStamp="$(DEPLOY_NAME)"
          /p:INCLUDE_GAM="False" /p:INCLUDE_GXFLOW_BACKOFFICE="False"
        name: PackageSources
      
      - script: >
          $(MSBUILD) "$(BL_PATH)\CreateCloudPackage.msbuild" /p:TargetId="AZURE_SERVERLESS" 
          /p:CreatePackageScript="createpackage.msbuild" /p:CreatePackageTarget="CreatePackage" 
          /p:DeployFullPath="$(KB_PATH)\NetModel\Deploy\AZURE_SERVERLESS\$(DEPLOYMENT_UNIT)\$(DEPLOY_NAME)" 
          /p:WebSourcePath="$(KB_PATH)\NetModel\web" /p:ProjectName="$(DEPLOY_NAME)" 
          /p:DeploymentUnit="$(DEPLOYMENT_UNIT)" /p:GX_PROGRAM_DIR="$(BL_PATH)"  
          /p:APPLICATION_KEY="$(APPLICATION_KEY)" /p:INCLUDE_GAM="False" 
          /p:INCLUDE_GXFLOW_BACKOFFICE="False" /p:APP_UPDATE="NONE" /p:ENABLE_KBN="False" /p:TARGET_JRE="9" /p:PACKAGE_FORMAT="Automatic" 
          /p:DEPLOY_TYPE="SOURCES" /p:TimeStamp="$(DEPLOY_NAME)" 
          /p:DeploySource="$(KB_PATH)\NetModel\Deploy\AZURE_SERVERLESS\$(DEPLOY_NAME).zip" 
          /t:CreatePackage
        name: AdditionalResources
        

  - job: CloneOrPull
    dependsOn: GenerateSources
    condition: or(succeeded(), eq(${{parameters.forcePush}}, 'true'))
    steps:
      - script: |
          IF EXIST "$(GIT_BRANCH)" (
            cd $(GIT_BRANCH)
            git checkout $(GIT_BRANCH)
            git pull
          ) ELSE (
            git clone https://$(GIT_USER):$(GIT_PASSWORD)@$(GIT_REPO) $(WORKING_DIR)\$(GIT_BRANCH)
          )
        workingDirectory: $(WORKING_DIR)
        name: CloneOrPull
      
  - job: PushSourcesToGit
    dependsOn: CloneOrPull
    condition: or(succeeded(),eq(${{parameters.forcePush}}], 'true'))
    steps:
      - script: >
          cd $(GIT_BRANCH)

          git checkout $(GIT_BRANCH)

          xcopy /E /I /Y "$(ANGULAR_FOLDER)" "$(WORKING_DIR)\$(GIT_BRANCH)\Angular"

          xcopy /E /I /Y "$(COMMIT_FOLDER)" "$(WORKING_DIR)\$(GIT_BRANCH)\$(DEPLOYMENT_UNIT)"

          git add *
        
          git commit -m "Commit build $(Build.BuildNumber)"

          git push -u origin $(GIT_BRANCH)
        workingDirectory: $(WORKING_DIR)
        name: CommitPush

    #Requires installing sqlpackage
    #use: dotnet tool install -g microsoft.sqlpackage
  - job: GenerateDacpac
    dependsOn: BuildKnowledgeBase
    condition: succeeded()
    steps:
      - powershell: >
          sqlpackage /TargetFile:".\$(kbalias).dacpac" /Action:Extract 
          /scs:"Server=$(SQL_SERVER);Initial Catalog=$(kbalias);Trusted_Connection=True;TrustServerCertificate=True;"
        workingDirectory: $(WORKING_DIR)
        name: GeneratingDacpac
        
      - publish: $(WORKING_DIR)/$(kbalias).dacpac
        artifact: $(kbalias).dacpac
        name: 'PublishArtifact'

parameters:
- name: forceClean
  displayName: Force Clean
  type: boolean
  default: false
  values:
  - true
  - false
- name: forceRebuild
  displayName: Force Rebuild
  type: boolean
  default: false
  values:
  - true
  - false
- name: forceSources
  displayName: Force Generate Sources
  type: boolean
  default: false
  values:
  - true
  - false
- name: forcePush
  displayName: Force Push
  type: boolean
  default: false
  values:
  - true
  - false
